<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.app.gradationback.mapper.UserMapper">

    <!--  회원가입  -->
    <insert id="insert" parameterType="UserVO">
        INSERT INTO TBL_USER (ID, USER_NAME, USER_EMAIL, USER_IDENTIFICATION, USER_PASSWORD, USER_PHONE, USER_NICKNAME, USER_SNS_OK, USER_MAIL_OK, USER_AGREEMENT_OK, USER_PROVIDER)
        VALUES (
        SEQ_USER.NEXTVAL,
        #{userName},
        #{userEmail},
        #{userIdentification},
        <if test="userPassword != null">#{userPassword}</if>
        <if test="userPassword == null">NULL</if>,
        #{userPhone},
        <if test="userNickName != null">#{userNickName}</if>
        <if test="userNickName == null">#{userName}</if>,
        <if test="userSnsOk != null">#{userSnsOk}</if>
        <if test="userSnsOk == null">DEFAULT</if>,
        <if test="userMailOk != null">#{userMailOk}</if>
        <if test="userMailOk == null">DEFAULT</if>,
        <if test="userAgreementOk != null">#{userAgreementOk}</if>
        <if test="userAgreementOk == null">DEFAULT</if>,
        <if test="userProvider != null">#{userProvider}</if>
        <if test="userProvider == null">DEFAULT</if>
        )
    </insert>

    <!--  전체 회원 조회  -->
    <select id="selectAllUser" resultType="UserVO">
        SELECT ID, USER_IMG_NAME, USER_IMG_PATH, USER_NAME, USER_EMAIL, USER_IDENTIFICATION, USER_PASSWORD,
               USER_PHONE, USER_NICKNAME, USER_ADDRESS, USER_DETAIL_ADDRESS, USER_POSTAL_CODE, USER_SNS_OK,
               USER_MAIL_OK, USER_AGREEMENT_OK, USER_INTRODUCE, USER_INSTAGRAM, USER_YOUTUBE, USER_BLOG,
               USER_KAKAO, USER_GOOGLE, USER_NAVER, USER_ADMIN_OK, USER_BAN_OK, MAJOR_ID, USER_MAJOR_IMG_NAME, USER_MAJOR_IMG_PATH,
               USER_WRITER_STATUS, USER_UNIVERSITY_STATUS, USER_ART_CATEGORY, USER_BACKGROUND_IMG_NAME, USER_BACKGROUND_IMG_PATH
        FROM TBL_USER
    </select>

    <!--  단일 회원 조회  -->
    <select id="selectUserByEmail" resultType="UserVO" parameterType="String">
        SELECT ID, USER_IMG_NAME, USER_IMG_PATH, USER_NAME, USER_EMAIL, USER_IDENTIFICATION, USER_PASSWORD,
               USER_PHONE, USER_NICKNAME, USER_ADDRESS, USER_DETAIL_ADDRESS, USER_POSTAL_CODE, USER_SNS_OK,
               USER_MAIL_OK, USER_AGREEMENT_OK, USER_INTRODUCE, USER_INSTAGRAM, USER_YOUTUBE, USER_BLOG,
               USER_KAKAO, USER_GOOGLE, USER_NAVER, USER_ADMIN_OK, USER_BAN_OK, MAJOR_ID, USER_MAJOR_IMG_NAME, USER_MAJOR_IMG_PATH,
               USER_WRITER_STATUS, USER_UNIVERSITY_STATUS, USER_ART_CATEGORY, USER_BACKGROUND_IMG_NAME, USER_BACKGROUND_IMG_PATH
        FROM TBL_USER
        WHERE USER_EMAIL = #{userEmail}
    </select>

    <select id="selectUserByIdentification" parameterType="String" resultType="UserVO">
        SELECT ID, USER_IMG_NAME, USER_IMG_PATH, USER_NAME, USER_EMAIL, USER_IDENTIFICATION, USER_PASSWORD, USER_PHONE, USER_NICKNAME
        FROM TBL_USER
        WHERE USER_IDENTIFICATION = #{userIdentification}
    </select>

    <!--  로그인 (아이디 + 비밀번호로 이메일 가져오기)  -->
    <select id="selectUserByIdentificationAndPassword" parameterType="UserVO" resultType="UserVO">
        SELECT USER_EMAIL
        FROM TBL_USER
        WHERE USER_IDENTIFICATION = #{userIdentification} AND USER_PASSWORD = #{userPassword}
    </select>

    <!--  아이디 찾기 (이름 + 이메일) -->
    <select id="selectIdentificationByEmailAndName" parameterType="UserVO" resultType="String">
        SELECT USER_IDENTIFICATION
        FROM TBL_USER
        WHERE USER_EMAIL = #{userEmail} AND USER_NAME = #{userName}
    </select>

    <!--  비밀번호 찾기 (이메일)  -->
    <select id="selectPasswordByEmail" parameterType="String" resultType="String">
        SELECT USER_PASSWORD
        FROM TBL_USER
        WHERE USER_EMAIL = #{userEmail}
    </select>

    <!--  아이디로 이메일 조회  -->
    <select id="selectEmailById" parameterType="Long" resultType="String">
        SELECT USER_EMAIL
        FROM TBL_USER
        WHERE ID = #{id}
    </select>

    <!--  이메일로 ID 조회  -->
    <select id="selectIdByEmail" parameterType="String" resultType="Long">
        SELECT ID
        FROM TBL_USER
        WHERE USER_EMAIL = #{userEmail}
    </select>

    <!--  회원 정보 수정  -->
    <update id="updateUser" parameterType="UserVO">
        UPDATE TBL_USER
        SET USER_NICKNAME = #{userNickName}, USER_NAME = #{userName},
            USER_PHONE = #{userPhone}, USER_EMAIL = #{userEmail},
            USER_ADDRESS = #{userAddress}, USER_DETAIL_ADDRESS = #{userDetailAddress},
            USER_PASSWORD = #{userPassword}
        WHERE USER_IDENTIFICATION = #{userIdentification}
    </update>

    <!--  회원 탈퇴  -->
    <delete id="deleteUser" parameterType="String">
        DELETE TBL_USER
		WHERE USER_EMAIL = #{userEmail}
    </delete>

<!--    관리자용 유저 정지 처리-->
    <insert id="insertBan" parameterType="BanDTO">
        INSERT INTO TBL_BAN(ID, BAN_DATE, BAN_REASON, USER_ID)
        VALUES (SEQ_BAN.NEXTVAL, #{banDate}, #{banReason}, #{userId})
    </insert>

<!--    관리자용 유저 정지 상태 업데이트(댓글, 영구)-->
    <update id="updateUserBanStatus" parameterType="banDTO">
        UPDATE TBL_USER
        SET USER_BAN_OK = #{usdrBanOk}
        WHERE ID = #{userId}
    </update>
<!--    댓글 작성 시 정지 유저 확인용-->
    <select id="selectUserByIdForWrite" resultType="userVO" parameterType="long">
        SELECT * FROM TBL_USER WHERE ID = #{id}
    </select>

</mapper>